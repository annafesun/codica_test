{"version":3,"file":"static/js/717.326bbb61.chunk.js","mappings":"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","sources":["hooks/useToggleSnackbar.ts","shared/components/Card/index.tsx","hooks/useActions.ts","pages/All/index.tsx","store/reducers/weather/selectors.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nconst useToggleSnackBar = (isOpen: boolean) => {\r\n  const [open, setOpen] = useState(isOpen)\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return event\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setOpen(isOpen)\r\n  }, [isOpen])\r\n\r\n  return { open, handleClose }\r\n}\r\n\r\nexport default useToggleSnackBar\r\n","import React, { memo } from \"react\"\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardHeader,\r\n  CircularProgress,\r\n  IconButton,\r\n  Typography,\r\n} from \"@mui/material\"\r\nimport HighlightOffRoundedIcon from \"@mui/icons-material/HighlightOffRounded\"\r\nimport { generateCityPath } from \"constants/routes\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { updateCityWeather } from \"store/reducers/weather/slice\"\r\nimport { useActions } from \"hooks/useActions\"\r\nimport { Weather } from \"store/reducers/weather/types\"\r\nimport { useAppDispatch } from \"store\"\r\n\r\nconst CityCard = ({ city }: { city: Weather }) => {\r\n  const dispatch = useAppDispatch()\r\n  const navigate = useNavigate()\r\n  const {\r\n    WeatherActs: { removeCard },\r\n  } = useActions()\r\n\r\n  return (\r\n    <Card key={city.id} sx={{ minWidth: 350, background: \"#bbbebf\" }}>\r\n      <CardContent>\r\n        <CardHeader\r\n          title={city.name + \" weather\"}\r\n          action={\r\n            <>\r\n              <Button sx={{ width: \"155px\" }} onClick={() => dispatch(updateCityWeather(city.name))} variant=\"outlined\">\r\n                {city.loading ? <CircularProgress size=\"25px\" /> : \"Update info\"}\r\n              </Button>\r\n              <IconButton onClick={() => removeCard(city.id)} aria-label=\"delete\">\r\n                <HighlightOffRoundedIcon />\r\n              </IconButton>\r\n            </>\r\n          }\r\n        />\r\n        <Typography variant=\"h3\" sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n          Temperature: {city.main.temp} &#8451;\r\n        </Typography>\r\n        <Typography variant=\"h3\" sx={{ mb: 1.5 }} color=\"text.secondary\">\r\n          Feels like: {city.main.feels_like} &#8451;\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Button\r\n          onClick={() => navigate(generateCityPath(String(city.name)))}\r\n          fullWidth\r\n          variant=\"contained\"\r\n          size=\"small\"\r\n          style={{ background: \"#012530\" }}\r\n        >\r\n          See more information\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default memo(CityCard)\r\n","import { useDispatch } from \"react-redux\"\r\nimport { bindActionCreators } from \"@reduxjs/toolkit\"\r\nimport { WeatherActions } from \"../store/reducers/weather\"\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const WeatherActs = bindActionCreators(WeatherActions, dispatch)\r\n\r\n  return {\r\n    WeatherActs,\r\n  }\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { Alert, Box, Button, CircularProgress, Snackbar, TextField } from \"@mui/material\"\r\nimport { fetchCityWeather, updateCityWeathers } from \"store/reducers/weather/slice\"\r\nimport { useAppDispatch, useAppSelector } from \"store\"\r\nimport useToggleSnackBar from \"hooks/useToggleSnackbar\"\r\nimport { getWeatherReducer } from \"store/reducers/weather/selectors\"\r\nimport CityCard from \"shared/components/Card\"\r\n\r\nconst All = () => {\r\n  const [city, setCity] = useState(\"\")\r\n  const dispatch = useAppDispatch()\r\n  const { cityWeathers, error, loading } = useAppSelector(getWeatherReducer)\r\n\r\n  const { open, handleClose } = useToggleSnackBar(loading === \"failed\")\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setCity(event.target.value)\r\n  }\r\n\r\n  const handleAddCity = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    dispatch(fetchCityWeather(city))\r\n    setCity(\"\")\r\n  }\r\n\r\n  useEffect(() => {\r\n    const cityNames = cityWeathers.map((city) => city.name)\r\n\r\n    dispatch(updateCityWeathers(cityNames))\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Box sx={{ p: 10 }}>\r\n      <Box component=\"form\" onSubmit={handleAddCity} sx={{ mb: 4, display: \"flex\" }}>\r\n        <TextField\r\n          name=\"city\"\r\n          autoComplete=\"off\"\r\n          type=\"text\"\r\n          value={city}\r\n          onChange={handleChange}\r\n          fullWidth\r\n          id=\"outlined-basic\"\r\n          label=\"Add city\"\r\n          variant=\"outlined\"\r\n        />\r\n        <Button type=\"submit\" sx={{ flex: \"0 0 30%\" }} variant=\"contained\" color=\"secondary\">\r\n          Add\r\n        </Button>\r\n      </Box>\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n        onClose={handleClose}\r\n      >\r\n        <Alert severity=\"error\" sx={{ width: \"100%\" }} onClose={handleClose} closeText=\"Close\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Box sx={{ display: \"flex\", justifyContent: \"center\", ...(loading !== \"pending\" && { height: \"30px\" }), mb: 3 }}>\r\n        {loading === \"pending\" && <CircularProgress size=\"30px\" />}\r\n      </Box>\r\n      <Box sx={{ display: \"grid\", gap: 4, gridTemplateColumns: \"repeat(4, 1fr)\" }}>\r\n        {cityWeathers.map((city) => (\r\n          <CityCard key={city.id} city={city} />\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default All\r\n","import { createSelector } from \"@reduxjs/toolkit\"\r\nimport { RootState } from \"store\"\r\n\r\nexport const getWeatherReducer = (state: RootState) => state.weather\r\nexport const getCityWeather = (cityName: string) =>\r\n  createSelector(\r\n    (state: RootState) => state.weather.cityWeathers,\r\n    (cityWeathers) => cityWeathers.find((city) => city.name === cityName)\r\n  )\r\n"],"names":["isOpen","useState","open","setOpen","useEffect","handleClose","event","reason","CityCard","city","dispatch","useAppDispatch","navigate","useNavigate","useDispatch","WeatherActs","bindActionCreators","WeatherActions","useActions","removeCard","Card","sx","minWidth","background","CardContent","CardHeader","title","name","action","Button","width","onClick","updateCityWeather","variant","loading","CircularProgress","size","IconButton","id","HighlightOffRounded","Typography","mb","color","main","temp","feels_like","CardActions","generateCityPath","String","fullWidth","style","memo","setCity","useAppSelector","getWeatherReducer","cityWeathers","error","useToggleSnackBar","cityNames","map","updateCityWeathers","Box","p","component","onSubmit","e","preventDefault","fetchCityWeather","display","TextField","autoComplete","type","value","onChange","target","label","flex","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","severity","closeText","justifyContent","height","gap","gridTemplateColumns","state","weather","getCityWeather","cityName","createSelector","find"],"sourceRoot":""}